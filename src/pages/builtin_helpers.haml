%h1#builtins
  Built-In Helpers

%h2#conditionals
  The <code>if</code> block helper

.content
  .bullet
    .description
      You can use the <code>if</code> helper to conditionally render a block. If
      its argument returns <code>false</code>, <code>undefined</code>, <code>null</code>,
      <code>""</code>, <code>0</code>, or <code>[]</code>, Handlebars will not
      render the block.
    :html
      <div class="entry">
        {{#if author}}
          <h1>{{firstName}} {{lastName}}</h1>
        {{/if}}
      </div>
    .notes
      when used with an empty (<code>{}</code>) context, <code>author</code> will be
      <code>undefined</code>, resulting in:
    :html
      <div class="entry">
      </div>

  .bullet
    .description
      When using a block expression, you can specify a template section to
      run if the expression returns a falsy value. The section, marked by
      <code>{{else}}</code> is called an "else section".
    :html
      <div class="entry">
        {{#if author}}
          <h1>{{firstName}} {{lastName}}</h1>
        {{else}}
          <h1>Unknown Author</h1>
        {{/if}}
      </div>

%h2#unless
  The <code>unless</code> block helper

.content
  .bullet
    .description
      You can use the <code>unless</code> helper as the inverse of the
      <code>if</code> helper. Its block will be rendered if the expression
      returns a falsy value.
    :html
      <div class="entry">
        {{#unless license}}
        <h3 class="warning">WARNING: This entry does not have a license!</h3>
        {{/unless}}
      </div>
    .notes
      If looking up <code>license</code> under the current context returns a
      falsy value, Handlebars will render the warning. Otherwise, it will render
      nothing.

%h2#iteration
  The <code>each</code> block helper

.content
  .bullet
    .description
      You can iterate over a list using the built-in <code>each</code>
      helper. Inside the block, you can use <code>this</code> to reference
      the element being iterated over.
    :html
      <ul class="people_list">
        {{#each people}}
          <li>{{this}}</li>
        {{/each}}
      </ul>
    .notes
      when used with this context:
    :javascript
      {
        people: [
          "Yehuda Katz",
          "Alan Johnson",
          "Charles Jolley"
        ]
      }
    .notes
      will result in:
    :javascript
      <ul class="people_list">
        <li>Yehuda Katz</li>
        <li>Alan Johnson</li>
        <li>Charles Jolley</li>
      </ul>
    .notes
      You can use the <code>this</code> expression in any context to reference
      the current context.

  .bullet
    .description
      You can optionally provide an <code>{{else}}</code> section which will display only when the list is empty.

    :html
      {{#each paragraphs}}
        <p>{{this}}</p>
      {{else}}
        <p class="empty">No content</p>
      {{/each}}

  .bullet
    .description
      When looping through items in <code>each</code>, you can optionally reference the current loop index via <code>{{@index}}</code>

    :html
      {{#each array}}
        {{@index}}: {{this}}
      {{/each}}

    .notes
      Additionally for object iteration, <code>{{@key}}</code> references the current key name:

    :html
      {{#each object}}
        {{@key}}: {{this}}
      {{/each}}

    .notes
      The first and last steps of iteration are noted via the <code>@first</code> and <code>@last</code>
      variables when iterating over an array. When iterating over an object only the <code>@first</code>
      is available.

    .notes
      Nested <code>each</code> blocks may access the interation variables via depth based paths.
      To access the parent index, for example, <code>{{@../index}}</code> can be used.


  .bullet
    .description
      The <code>each</code> helper also supports <a href="block_helpers.html#block-params">block parameters</a>, allowing for named references anywhere in the block.

    :html
      {{#each array as |value, key|}}
        {{#each child as |childValue, childKey|}}
          {{key}} - {{childKey}}. {{childValue}}
        {{/each}}
      {{/each}}

    .notes
      Will create a <code>key</code> and <code>value</code> variable that children may access without the need for depthed variable references. In the example above, <code>{{key}}</code> is identical to <code>{{@../key}}</code> but in many cases is more readable.

%h2#with
  The <code>with</code> Block Helper

.content
  .bullet
    .description
      Normally, Handlebars templates are evaluated against the context
      passed into the compiled method.
    :javascript
      var source   = "<p>{{lastName}}, {{firstName}}</p>";
      var template = Handlebars.compile(source);
      template({firstName: "Alan", lastName: "Johnson"});
    .notes
      results in
    :html
      <p>Johnson, Alan</p>

  .bullet
    .description
      You can shift the context for a section of a template by using
      the built-in <code>with</code> block helper.
    :html
      <div class="entry">
        <h1>{{title}}</h1>

        {{#with author}}
        <h2>By {{firstName}} {{lastName}}</h2>
        {{/with}}
      </div>
    .notes
      when used with this context:
    :javascript
      {
        title: "My first post!",
        author: {
          firstName: "Charles",
          lastName: "Jolley"
        }
      }
    .notes
      will result in:
    :html
      <div class="entry">
        <h1>My first post!</h1>

        <h2>By Charles Jolley</h2>
      </div>

  .bullet
    .description
      <code>with</code> can also be used with block parameters to define known references in the current block. The example above can be converted to

    :html
      <div class="entry">
        <h1>{{title}}</h1>

        {{#with author as |myAuthor|}}
        <h2>By {{myAuthor.firstName}} {{myAuthor.lastName}}</h2>
        {{/with}}
      </div>

    .notes
      Which allows for complex templates to potentially provide clearer code than <code>../</code> depthed references allow for.

  .bullet
    .description
      You can optionally provide an <code>{{else}}</code> section which will display
      only when the passed value is empty.

    :html
      {{#with author}}
        <p>{{name}}</p>
      {{else}}
        <p class="empty">No content</p>
      {{/with}}

%h2#lookup
  The <code>lookup</code> helper

.contents
  .bullet
    .description
      The <code>lookup</code> helper allows for dynamic parameter resolution using Handlebars
      variables. This is useful for resolving values for array indexes.

    :html
      {{#each bar}}
        {{lookup ../foo @index}}
      {{/each}}

%h2#log
  The <code>log</code> block helper

.contents
  .bullet
    .description
      The <code>log</code> helper allows for logging of context state while executing
      a template.

    :html
      {{log "Look at me!"}}

    .notes
      Delegates to <code>Handlebars.logger.log</code> which may
      be overriden to perform custom logging.

    .notes
      Any number of arguments may be passed to this method and all will be forwarded to the logger.

    :html
      {{log "This is logged" foo "And so is this"}}

    .notes
      The log level may be set using the <code>level</code> hash parameter. Supported values are <code>debug</code>, <code>info</code>, <code>warn</code>, and <code>error</code>. When omitted, <code>info</code> is the default value,

    :html
      {{log "Log!" level="error"}}

    .notes
      Logging is conditional based on the level and to value set in <code>Handlebars.logger.level</code>, which defaults to <code>info</code>. All log statements at or above the current level will be output.

%h2#blockHelperMissing
  The <code>blockHelperMissing</code> helper

.contents
  .bullet
    .description
      Implicitly called when a helper can not be directly resolved in the environment's helpers hash.

    :html
      {{#foo}}{{/foo}}

    .notes
      will call this helper with the resolved value of <code>foo</code> on the current context and
      the <code>options.name</code> field set to <code>"foo"</code>. For instances where there is no
      registered helper named <code>foo</code>.

    .notes
      This may be overriden by users that wish to change the behavior of block evaluation.
      For example

    :javascript
      Handlebars.registerHelper('blockHelperMissing', function(context, options) {
        throw new Handlebars.Exception('Only if or each is allowed');
      });

    .notes
      could be used to prevent the use of mustache-style block evaluation in favor of the
      more efficent <code>if</code> and <code>each</code> helpers.

%h2#helperMissing
  The <code>helperMissing</code> helper

.contents
  .bullet
    .description
      Internal helper that is called when a potential helper expression was not found in either the
      environment helpers or the current context. For cases where both are run, this is run prior
      to the <code>blockHelperMissing</code> helper.

    :html
      {{foo}}
      {{foo bar}}
      {{#foo}}{{/foo}}

    .notes
      Will each call this helper, passing any arguments that would have been otherwise passed to a
      helper of the same name. This helper is not called when using <code>knownHelpersOnly</code>
      mode.

    .notes
      This may be overriden by applications. To force the existence of the field, the following may
      be used:

    :javascript
      Handlebars.registerHelper('helperMissing', function(/* [args, ] options */) {
        var options = arguments[arguments.length - 1];
        throw new Handlebars.Exception('Unknown field: ' + options.name);
      });
