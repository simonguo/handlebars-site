#intro
  %p
    Handlebars allows for template reuse through partials. Partials are normal Handlebars templates that may be called directly by other templates.

%h2#basic-partials
  Basic Partials

.contents
  .bullet
    .description
      In order to use a partial, it must be registered via <code>Handlebars.registerPartial</code>.
    :javascript
      Handlebars.registerPartial('myPartial', '{{name}}')
    .notes
      This call will register the <code>myPartial</code> partial. Partials may be precompiled and the precompiled template passed into the second parameter.

    .description
      Calling the partial is done through the partial call syntax:
    :html
      {{> myPartial }}
    .notes
      Will render the partial named <code>myPartial</code>. When the partial executes, it will be run under the current execution context.

%h2#dynamic-partials
  Dynamic Partials

.contents
  .bullet
    .description
      It's possible to dynamically select the partial to be executed by using sub expression syntax.
    :html
      {{> (whichPartial) }}
    .notes
      Will evaluate <code>whichPartial</code> and then render the partial whose name is returned by this function.
    .notes
      Subexpressions do not resolve variables so <code>whichPartial</code> must be a function. If a simple variable has the partial name, it's possible to resolve it via the <code>lookup</code> helper.
    :html
      {{> (lookup . 'myVariable') }}

%h2#partial-context
  Partial Contexts

.contents
  .bullet
    .description
      It's possible to execute partials on a custom context by passing in the context to the partial call.
    :html
      {{> myPartial myOtherContext }}

%h2#partial-parameters
  Partial Parameters

.contents
  .bullet
    .description
      Custom data can be passed to partials through hash parameters.
    :html
      {{> myPartial parameter=value }}
    .notes
      Will set <code>parameter</code> to <code>value</code> when the partial runs.
    .notes
      This is particularly useful for exposing data from parent contexts to the partial:
    :html
      {{> myPartial name=../name }}

%h2#partial-block
  Partial Blocks

.contents
  .bullet
    .description
      The normal behavior when attempting to render a partial that is not found is for the implementation to throw an error. If failover is desired instead, partials may be called using the block syntax.

    :html
      {{#> myPartial }}
        Failover content
      {{/myPartial}}

    .notes
      Which will render <code>Failover content</code> if the <code>myPartial</code> partial is not registered.

  .bullet
    .description
      This block syntax may also be used to pass templates to the partial, which can be executed by the specially named partial, <code>@partial-block</code>. A template of
    :html
      {{#> layout }}
        My Content
      {{/layout}}

    .descrption
      with the <code>layout</code> partial containing
    :html
      Site Content
      {{> @partial-block }}

    .description
      Would render
    :html
      Site Content
      My Content

    .notes
      When called in this manner, the block will execute under the context of the partial at the time of the call. Depthed paths and block parameters operate relative to the partial block rather than the partial template.

    :html
      {{#each children as |child|}}
        {{#> childEntry}}
          {{child.value}}
        {{/childEntry}}
      {{/each}}

    .notes
      Will render <code>child.value</code> from this template, not the partial.

%h2#inline-partials
  Inline Partials

.contents
  .bullet
    .description
      Templates may define block scoped partials via the <code>inline</code> decorator.

    :html
      {{#*inline "myPartial"}}
        My Content
      {{/inline}}
      {{#each children}}
        {{> myPartial}}
      {{/each}}

    .description
      Which will render the <code>myPartial</code> partial for each child.

  .bullet
    .description
      Each inline partial is available to the current block and all children, including execution of other partials. This allows for layout templates and similar functionality:

    :html
      {{#> layout}}
        {{#*inline "nav"}}
          My Nav
        {{/inline}}
        {{#*inline "content"}}
          My Content
        {{/inline}}
      {{/layout}}

    .notes
      Where the <code>layout</code> partial may be:

    :html
      <div class="nav">
        {{> nav}}
      </div>
      <div class="content">
        {{> content}}
      </div>